<?xml version="1.0" encoding="utf-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.0.39 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC3280 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.3280.xml">
<!ENTITY RFC4055 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.4055.xml">
<!ENTITY RFC4648 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.4648.xml">
<!ENTITY RFC6920 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6920.xml">
<!ENTITY RFC8017 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8017.xml">
<!ENTITY I-D.draft-irtf-cfrg-eddsa-08 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.draft-irtf-cfrg-eddsa-08.xml">
<!ENTITY RFC2119 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC3110 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.3110.xml">
<!ENTITY RFC4871 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.4871.xml">
]>

<?rfc toc="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<?rfc comments="yes"?>

<rfc docName="draft-thomas-crypto-conditions-02" category="std">

  <front>
    <title>Crypto-Conditions</title>

    <author initials="S." surname="Thomas" fullname="Stefan Thomas">
      <organization>Ripple</organization>
      <address>
        <postal>
          <street>300 Montgomery Street</street>
          <city>San Francisco</city>
          <region>CA</region>
          <code>94104</code>
          <country>US</country>
        </postal>
        <phone>-----------------</phone>
        <email>stefan@ripple.com</email>
        <uri>https://www.ripple.com</uri>
      </address>
    </author>
    <author initials="R." surname="Reginelli" fullname="Rome Reginelli">
      <organization>Ripple</organization>
      <address>
        <postal>
          <street>300 Montgomery Street</street>
          <city>San Francisco</city>
          <region>CA</region>
          <code>94104</code>
          <country>US</country>
        </postal>
        <phone>-----------------</phone>
        <email>rome@ripple.com</email>
        <uri>https://www.ripple.com</uri>
      </address>
    </author>
    <author initials="A." surname="Hope-Bailie" fullname="Adrian Hope-Bailie">
      <organization>Ripple</organization>
      <address>
        <postal>
          <street>300 Montgomery Street</street>
          <city>San Francisco</city>
          <region>CA</region>
          <code>94104</code>
          <country>US</country>
        </postal>
        <phone>-----------------</phone>
        <email>adrian@ripple.com</email>
        <uri>https://www.ripple.com</uri>
      </address>
    </author>

    <date year="2016" month="December" day="20"/>

    <area>security</area>
    
    

    <abstract>


<t>The crypto-conditions specification defines a set of encoding formats and data structures for <spanx style="strong">conditions</spanx> and <spanx style="strong">fulfillments</spanx>.  A condition uniquely identifies a logical "boolean circuit" constructed from one or more logic gates, evaluated by either validating a cryptographic signature or verifying the preimage of a hash digest. A fulfillment is a data structure encoding one or more cryptographic signatures and hash digest preimages that define the structure of the circuit and provide inputs to the logic gates allowing for the result of the circuit to be evaluated.</t>

<t>A fulfillment is validated by evaluating that the circuit output is TRUE but also that the provided fulfillment matches the circuit fingerprint, the condition.</t>

<t>Since evaluation of some of the logic gates in the circuit (those that are signatures) also take a message as input the evaluation of the entire fulfillment takes an optional input message which is passed to each logic gate as required. As such the algorithm to validate a fulfillment against a condition and a message matches that of other signature schemes and a crypto-condition can serve as a sophisticated and flexible replacement for a simple signature where the condition is used as the public key and the fulfillment as the signature.</t>



    </abstract>


    <note title="Feedback">


<t>This specification is a part of the <eref target="https://interledger.org/">Interledger Protocol</eref> work. Feedback related to this specification should be sent to <eref target="mailto:ledger@ietf.org">ledger@ietf.org</eref>.</t>


    </note>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>Crypto-conditions is a scheme for composing signature-like structures from one or more existing signature scheme or hash digest primitives. It defines a mechanism for these existing primitives to be combined and grouped to create complex signature arrangements but still maintain the useful properties of a simple signature, most notably, that a deterministic algorithm exists to verify the signature against a message given a public key.</t>

<t>Using crypto-conditions, existing primitives such as RSA and ED25519 signature schemes and SHA256 digest algorithms can be used as logic gates to construct complex boolean circuits which can then be used as a compound signature. The validation function for these compound signatures takes as input the fingerprint of the circuit, called the condition, the circuit definition and minimum required logic gates with their inputs, called the fulfillment, and a message.</t>

<t>The function returns a boolean indicating if the compound signature is valid or not. This property of crypto-conditions means they can be used in most scenarios as a replacement for existing signature schemes which also take as input, a public key (the condition), a signature (the fulfillment), and a message and return a boolean result.</t>

</section>
<section anchor="terminology" title="Terminology">
<t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in <xref target="RFC2119"></xref>.</t>

</section>
<section anchor="types" title="Types">
<t>Crypto-conditions are a standard format for expressing conditions and fulfillments. The format supports multiple algorithms, including different hash functions and cryptographic signing schemes. Crypto-conditions can be nested in multiple levels, with each level possibly having multiple signatures.</t>

<t>The different types of crypto-conditions each have different internal strutures and employ different cryptographic algorithms as primitives.</t>

<section anchor="simple-and-compound-types" title="Simple and Compound Types">

<t>Two categories of crypto-condition type exist. Simple crypto-conditions provide a standard encoding of common cryptographic primitives with hardcoded parameters, e.g RSA and ED25519 signature or SHA256 hash digests. As such, simple types that use the same underlying scheme (e.g. SHA) with different parameters (e.g. 256 or 512 bits) are considered different crypto-condition types.</t>

<t>As an example, the types defined in this version of the specification all use the SHA-256 digest algorithm to generate the condition fingerprint. If a future version were to introduce SHA-512 as an alternative this would require that new types be defined for each existing type that must have its condition generated using SHA-512.</t>

<t>Compound crypto-conditions contain one or more sub-crypto-conditions. The compound crypto-condition will evaluate to TRUE or FALSE based on the output of the evaluation of the sub-crypto-conditions. In this way compound crypto-conditions are used to construct branches of a boolean circuit.</t>

<t>To validate a compound crypto-condition all sub-crypto-conditions are provided in the fulfillment so that the fingerprint of the compound condition can be generated. However, some of these sub-crypto-conditions may be sub-fulfillments and some may be sub-conditions, depending on the type and properties of the compound crypto-condition.</t>

<t>As an example, in the case of an m-of-n signature scheme, only m sub-fulfillments are needed to validate the compound signature, but the remaining n-m sub-conditions must still be provided to validate that the complete fulfillment matches the originally provided condition. This is an important feature for multi-party signing, when not all parties are ready to provide fulfillment yet all parties still desire fulfillment of the overall condition if enough counter-parties do provide fulfillment.</t>

</section>
<section anchor="defining-and-supporting-new-types" title="Defining and Supporting New types">

<t>The crypto-conditions format has been designed so that it can be expanded. For example, you can add new cryptographic signature schemes or hash functions. This is important because advances in cryptography frequently render old algorithms insecure or invent newer, more effective algorithms.</t>

<t>Implementations are not required to support all condition types therefore it is necessary to indicate which types an implementation must support in order to validate a fulfillment. For this reason, compound conditions are encoded with an additional field, subtypes, indicating the set of types and subtypes of all sub-crypto-conditions.</t>

</section>
</section>
<section anchor="features" title="Features">

<t>Crypto-conditions offer many of the features required of a regular signature scheme but also others which make them useful in a variety of new use cases.</t>

<section anchor="multi-algorithm" title="Multi-Algorithm">

<t>Each condition type uses one or more cryptographic primitives such as digest or signature algorithms. Compound types may contain sub-crypto-conditions of any type and indicate the set of underlying types in the subtypes field of the condition</t>

<t>To verify that a given implementation can verify a fulfillment for a given condition, implementations MUST ensure they are able to validate fulfillments of all types indicated in the subtypes field of a compound condition. If an implementation encounters an unknown type it MUST reject the condition as it will almost certainly be unable to validate the fulfillment.</t>

</section>
<section anchor="multi-signature" title="Multi-Signature">
<t>Crypto-conditions can abstract away many of the details of multi-sign. When a party provides a condition, other parties can treat it opaquely and do not need to know about its internal structure. That allows parties to define arbitrary multi-signature setups without breaking compatibility. That said, it is important that implementations must inspect the ypes and subtypes of any crypto-conditions they encounter to ensure they do not pass on a condition they will not be able to verify at a later stage.</t>

<t>In many instances protocol designers can use crypto-conditions as a drop-in replacement for public key signature algorithms and add multi-signature support to their protocols without adding any additional complexity.</t>

</section>
<section anchor="multi-level" title="Multi-Level">
<t>Crypto-conditions elegantly support weighted multi-signatures and multi-level signatures. A threshold condition has a number of subconditions, and a target threshold. Each subcondition can be a signature or another threshold condition. This provides flexibility in forming complex conditions.</t>

<t>For example, consider a threshold condition that consists of two subconditions, one each from Wayne and Alf. Alf's condition can be a signature condition while Wayne's condition is a threshold condition, requiring both Claude and Dan to sign for him.</t>

<t>Multi-level signatures allow more complex relationships than simple M-of-N signing. For example, a weighted condition can support an arrangement of subconditions such as, "Either Ron, Mac, and Ped must approve; or Smithers must approve."</t>

</section>
<section anchor="crypto-conditions-as-a-signature-scheme" title="Crypto-conditions as a signature scheme">

<t>Crypto-conditions is a signature scheme for compound signatures which has similar properties to most other signature schemes, such as:</t>

<t><list style="numbers">
  <t>Validation of the signature (the fulfillment) is done using a public key (the condition) and a message as input</t>
  <t>The same public key can be used to validate multiple different signatures, each against a different message</t>
  <t>It is not possible to derive the signature from the public key</t>
</list></t>

<t>However, the scheme also has a number of features that make it unique such as:</t>

<t><list style="numbers">
  <t>It is possible to derive the same public key from any valid signature without the message</t>
  <t>It is possible for the same public key and message to be used to validate multiple signatures. For example, the fulfillment of an m-of-n condition will be different for each combination of n signatures.</t>
  <t>Composite signatures use one or more other signatures as components allowing for recursive signature validation logic to be defined.</t>
  <t>A valid signature can be produced using different combinations of private keys if the structure of the compound signature requires only specific combinations of internal signatures to be valid  (m of n signature scheme).</t>
</list></t>

</section>
<section anchor="crypto-conditions-as-a-trigger-in-distributed-systems" title="Crypto-conditions as a trigger in distributed systems">

<t>One of the challenges facing a distributed system is achieving atomic execution of a transaction across the system. A common pattern for solving this problem is two-phase commit in which the most time and resource-consuming aspects of the transaction are prepared by all participants following which a simple trigger is sufficient to either commit or abort the transaction. Described in more abstract terms, the system consists of a number of participants that have prepared a transaction pending the fulfillment of a predefined condition.</t>

<t>Crypto-conditions defines a mechanism for expressing these triggers as pairs of unique trigger identifiers (conditions) and cryptographically verifiable triggers (fulfillments) that can be deterministically verified by all participants.</t>

<t>It is also important that all participants in such a distributed system are able to evaluate, prior to the trigger being fired, that they will be capable of verifying the trigger. Determinism is useless if validation of the trigger requires algorithms or resources that are not available to all participants.</t>

<t>Therefore conditions may be used as <spanx style="strong">distributable event descriptions</spanx> in the form of a <spanx style="emph">fingerprint</spanx>, but also <spanx style="emph">event meta-data</spanx> that allows the event verification system to determine if they have the necessary capabilities (such as required crypto-algorithms) and resources (such as heap size or memory) to verify the event notification later.</t>

<t>Fulfillments are therefore <spanx style="strong">cryptographically verifiable event notifications</spanx> that can be used to verify the event occurred but also that it matches the given description.</t>

<t>When using crypto-conditions as a trigger it will often make sense for the message that is used for validation to be empty to match the signature of the trigger processing system's API. This makes crypto-conditions compatible with systems that use simple hash-locks as triggers.</t>

<t>If a PKI signature scheme is being used for the triggers this would require a new key pair for each trigger which is impractical. Therefore the PREFIX compound type wraps a sub-crypto-condition with a message prefix that is applied to the message before signature validation. In this way a unique condition can be derived for each trigger even if the same key pair is re-used with an empty message.</t>

</section>
<section anchor="smart-signatures" title="Smart signatures">

<t>In the Interledger protocol, fulfillments provide non-repudiable proof that a transaction has been completed on a ledger. They are simple messages that can be easily shared with other ledgers. This allows ledgers to escrow funds or hold a transfer conditionally, then execute the transfer automatically when the ledger sees the fulfillment of the stated condition. In this way the Interledger protocol synchronizes multiple transfers on distinct ledgers in an almost atomic end-to-end transaction.</t>

<t>Crypto-conditions may also be useful in other contexts where a system needs to make a decision based on predefined criteria, and the proof from a trusted oracle(s) that the criteria have been met, such as smart contracts.</t>

<t>The advantage of using crypto-conditions for such use cases as opposed to a turing complete contract scripting language is the fact that the outcome of a crypto-condition validation is deterministic across platforms as long as the underlying cryptographic primitives are correctly implemented.</t>

</section>
</section>
<section anchor="validation-of-a-fulfillment" title="Validation of a fulfillment">

<t>Validation of a fulfillment (F) against a condition (C) and a message (M), in the majority of cases, follows these steps:</t>

<t><list style="numbers">
  <t>The implementation must derive a condition from the fulfillment and ensure that the derived condition (D) matches the given condition (C).</t>
  <t>If the fulfillment is a simple crypto-condition AND is based upon a signature scheme (such as RSA-PSS or ED25519) then any signatures in the fulfillment (F) must be verified, using the appropriate signature verification algorithm, against the corresponding public key, also provided in the fulfillment and the message (M) (which may be empty).</t>
  <t>If the fulfillment is a compound crypto-condition then the sub-fulfillments MUST each be validated. In the case of the PREFIX-SHA-256 type the sub-fulfillment MUST be valid for F to be valid and in the case of the THRESHOLD-SHA-256 type the number of valid sub-fulfillments must be equal or greater than the threshold defined in F.</t>
</list></t>

<t>If the derived condition (D) matches the input condition (C) AND the boolean circuit defined by the fulfillment evaluates to TRUE then the fulfillment (F) fulfills the condition (C).</t>

<t>A more detailed validation algorithm for each crypto-condition type is provided with the details of the type later in this document. In each case the notation F.x or C.y implies; the decoded value of the field named x of the fulfillment and the decoded value of the field named y of the Condition respectively.</t>

<section anchor="subfulfillments" title="Subfulfillments">

<t>In validating a fulfillment for a compound crypto-condition it is necessary to validate one or more sub-fulfillments per step 3 above. In this instance the condition for one or more of these sub-fulfillments is often not available for comparison with the derived condition. Implementations MUST skip the first fulfillment validation step as defined above and only perform steps 2 and 3 of the validation.</t>

<t>The message (M) used to validate sub-fulfillments is the same message (M) used to validate F however in the case of the PREFIX-SHA-256 type this is prefixed with F.prefix before validation of the sub-fulfillment is performed.</t>

</section>
</section>
<section anchor="deriving-the-condition" title="Deriving the Condition">

<t>Since conditions provide a unique fingerprint for fulfillments it is important that a determinisitic algorithm is used to derive a condition. For each crypto-condition type details are provided on how to:</t>

<t><list style="numbers">
  <t>Assemble the fingerprint content and calculate the hash digest of this data.</t>
  <t>Calculate the maximum cost of validating a fulfillment</t>
</list></t>

<t>For compound types the fingerprint content will contain the complete, encoded, condition for all sub-crypto-conditions. Implementations MUST abide by the ordering rules provided when assembling the fingerprint content.</t>

<t>When calculating the fingerprint of a compound crypto-condition implementations MUST first derive the condition for all sub-fulfillments and include these conditions when assembling the fingerprint content.</t>

<section anchor="conditions-as-public-keys" title="Conditions as Public Keys">

<t>Since the condition is just a fingerprint and meta-data about the crypto-condition it can be transmitted freely in the same way a public key is shared publicly. It's not possible to derive the fulfillment from the condition.</t>

</section>
</section>
<section anchor="format" title="Format">

<t>A description of crypto-conditions is provided in this document using Abstract Syntax Notation One (ASN.1) as defined in <xref target="itu.X680.2015"></xref>.</t>

<section anchor="encoding-rules" title="Encoding Rules">

<t>Implementations of this specificiation MUST support encoding and decoding using Distinguished Encoding Rules (DER) as defined in <xref target="itu.X690.2015"></xref>. This is the canonical encoding format.</t>

<t>Alternative encodings may be used to represent top-level conditions and fulfillments but to ensure a determinisitic outcome in producing the condition fingerprint content, including any sub-conditions, MUST be DER encoded prior to hashing.</t>

<t>The exception is the PREIMAGE-SHA-256 condition where the fingerprint content is the raw preimage which is not encoded prior to hashing. This is to allow a PREIMAGE-SHA-256 crypto-condition to be used in systems where "hash-locks" are already in use.</t>

</section>
<section anchor="condition-format" title="Condition">

<t>The binary encoding of conditions differs based on their type. All types define at least a fingerprint and cost sub-field. Some types, such as the compound condition types, define additional sub-fields that are required to convey essential properties of the crypto-condition (such as the sub-types used by sub-conditions in the case of the compound types).</t>

<t>Each crypto-condition type has a type ID. The list of known types is the IANA-maintained <xref target="crypto-conditions-type-registry">Crypto-Condition Type Registry</xref>.</t>

<t>Conditions are encoded as follows:</t>

<figure><artwork><![CDATA[
Condition ::= CHOICE {
  preimageSha256   [0] SimpleSha256Condition,
  prefixSha256     [1] CompoundSha256Condition,
  thresholdSha256  [2] CompoundSha256Condition,
  rsaSha256        [3] SimpleSha256Condition,
  ed25519Sha256    [4] SimpleSha256Condition
}

SimpleSha256Condition ::= SEQUENCE {
  fingerprint          OCTET STRING (SIZE(32)),
  cost                 INTEGER (0..4294967295)
}

CompoundSha256Condition ::= SEQUENCE {
  fingerprint          OCTET STRING (SIZE(32)),
  cost                 INTEGER (0..4294967295),
  subtypes             ConditionTypes
}

ConditionTypes ::= BIT STRING {
  preImageSha256   (0),
  prefixSha256     (1),
  thresholdSha256  (2),
  rsaSha256        (3),
  ed25519Sha256    (4)
}
]]></artwork></figure>

<section anchor="fingerprint" title="Fingerprint">

<t>The fingerprint is an octet string uniquely representing the condition with respect to other conditions <spanx style="strong">of the same type</spanx>.</t>

<t>Implementations which index conditions MUST use the complete encoded condition as the key, not just the fingerprint - as different conditions of different types may have the same fingerprint.</t>

<t>For most condition types, the fingerprint is a cryptographically secure hash of the data which defines the condition, such as a public key.</t>

<t>For types that use PKI signature schemes, the signature is intentionally not included in the content that is used to compose the fingerprint. This means the fingerprint can be calculated without needing to know the message or having access to the private key.</t>

<t>Future types may use different functions to produce the fingerprint, which may have different lengths, therefore the field is encoded as a variable length string.</t>

</section>
<section anchor="cost" title="Cost">

<t>For each type, a cost function is defined which produces a determinsitic cost value based on the properties of the condition.</t>

<t>The cost functions are designed to produce a number that will increase rapidly if the structure and properties of a crypto-condition are such that they increase the resource requirements of a system that must validate the fulfillment.</t>

<t>The constants used in the cost functions are selected in order to provide some consistency across types for the cost value and the expected "real cost" of validation. This is not an exact science given that some validations will require signature verification (such as RSA and ED25519) and others will simply require hashing and storage of large values therefore the cost functions are roughly configured (through selection of constants) to be the number of bytes that would need to be processed by the SHA-256 hash digest algorithm to produce the equivalent amount of work.</t>

<t>The goal is to produce an indicative number that implementations can use to protect themselves from attacks involving crypto-conditions that would require massive resources to validate (denial of service type attacks).</t>

<t>Since dynamic heuristic measures can't be used to acheive this a deterministic value is required that can be produced consistently by any implementation, therefore for each crypto-condition type, an algorithm is provided for consistently calculating the cost.</t>

<t>Implementations MUST determine a safe cost ceiling based on the expected cost value of crypto-conditions they will need to process. When a crypto-condition is submitted to an implementation, the implementation MUST verify that it will be able to process a fulfillment with the given cost (i.e. the cost is lower than the allowed ceiling) and reject it if not.</t>

<t>Cost function constants have been rounded to numbers that have an efficient base-2 representation to facilitate efficient arithmetic operations.</t>

</section>
<section anchor="subtypes" title="Subtypes">

<t>Subtypes is a bitmap that indicates the set of types an implementation must support in order to be able to successfully validate the fulfillment of this condition. This is the set of types and subtypes of all sub-crypto-conditions, recursively excluding the type of the root crypto-condition.</t>

<t>It must be possible to verify that all types used in a crypto-condition are supported (including the types and subtypes of any sub-crypto-conditions) even if the fulfillment is not available to be analysed yet. Therefore, all compound conditions set the bits in this bitmap that correspond to the set of types and subtypes of all sub-crypto-conditions.</t>

<t>The field is encoded as a variable length BIT STRING, as defined in ASN.1 to accommodate new types that may be defined.</t>

<t>Each bit in the bitmap represents a type from the list of known types in the IANA-maintained <xref target="crypto-conditions-type-registry">Crypto-Condition Type Registry</xref> and the bit corresponding to each type is the bit at position X where X is the type ID of the type.</t>

<t>The presence of one or more sub-crypto-conditions of a specific type is indicated by setting the numbered bit corresponding to the type ID of that type.</t>

<t>For example, a compound condition that contains an ED25519-SHA-256 crypto-condition as a sub-crypto-condition will set the bit at position 4.</t>

</section>
</section>
<section anchor="fulfillment-format" title="Fulfillment">

<t>The ASN.1 definition for fulfillments is defined as follows:</t>

<figure><artwork><![CDATA[
Fulfillment ::= CHOICE {
  preimageSha256   [0] PreimageFulfillment ,
  prefixSha256     [1] PrefixFulfillment,
  thresholdSha256  [2] ThresholdFulfillment,
  rsaSha256        [3] RsaSha256Fulfillment,
  ed25519Sha256    [4] Ed25519Sha512Fulfillment
}

PreimageFulfillment ::= SEQUENCE {
  preimage             OCTET STRING
}

PrefixFulfillment ::= SEQUENCE {
  prefix               OCTET STRING,
  maxMessageLength     INTEGER (0..4294967295),
  subfulfillment       Fulfillment
}

ThresholdFulfillment ::= SEQUENCE {
  subfulfillments      SEQUENCE OF Fulfillment,
  subconditions        SEQUENCE OF Condition
}

RsaSha256Fulfillment ::= SEQUENCE {
  modulus              OCTET STRING,
  signature            OCTET STRING
}

Ed25519Sha512Fulfillment ::= SEQUENCE {
  publicKey            OCTET STRING (SIZE(32)),
  signature            OCTET STRING (SIZE(64))
}
]]></artwork></figure>

</section>
</section>
<section anchor="crypto-condition-types" title="Crypto-Condition Types">
<t>The following condition types are defined in this version of the specification. While support for additional crypto-condition types may be added in the future and will be registered in the IANA maintained <xref target="crypto-conditions-type-registry">Crypto-Condition Type Registry</xref>, no other types are supported by this specification.</t>

<section anchor="preimage-sha-256-condition-type" title="PREIMAGE-SHA-256">

<t>PREIMAGE-SHA-256 is assigned the type ID 0. It relies on the availability of the SHA-256 digest algorithm.</t>

<t>This type of condition is also called a "hashlock". By creating a hash of a difficult-to-guess 256-bit random or pseudo-random integer it is possible to create a condition which the creator can trivially fulfill by publishing the random value. However, for anyone else, the condition is cryptographically hard to fulfill, because they would have to find a preimage for the given condition hash.</t>

<t>Implementations MUST ignore any input message when validating a PREIMAGE-SHA-256 fulfillment as the validation of this crypto-condition type only requires that the SHA-256 digest of the preimage, taken from the fulfillment, matches the fingerprint, taken from the condition.</t>

<section anchor="preimage-sha-256-condition-type-maxcost" title="Cost">

<t>The cost is the size, in bytes, of the <spanx style="strong">unencoded</spanx> preimage.</t>

<figure><artwork><![CDATA[
cost = preimage length
]]></artwork></figure>

</section>
<section anchor="preimage-sha-256-condition-asn1" title="ASN.1">

<figure><artwork><![CDATA[
-- Condition Fingerprint
-- The PREIMAGE-SHA-256 condition fingerprint content is not DER encoded
-- The fingerprint content is the preimage

-- Fulfillment 
PreimageFulfillment ::= SEQUENCE {
  preimage             OCTET STRING
}
]]></artwork></figure>

</section>
<section anchor="preimage-sha-256-condition-type-condition" title="Condition Format">

<t>The fingerprint of a PREIMAGE-SHA-256 condition is the SHA-256 hash of the <spanx style="strong">unencoded</spanx> preimage.</t>

</section>
<section anchor="preimage-sha-256-condition-type-fulfillment" title="Fulfillment Format">

<t>The fulfillment simply contains the preimage (encoded into a SEQUENCE of one element for consistency).</t>

</section>
<section anchor="preimage-sha-256-condition-type-validating" title="Validating">

<t>A PREIMAGE-SHA-256 fulfillment is valid iff C.fingerprint is equal to the SHA-256 hash digest of F.</t>

</section>
<section anchor="preimage-sha-256-example" title="Example">

<figure><artwork><![CDATA[
examplePreimageCondition Condition ::= 
  preimageSha256 : {
    fingerprint '7F83B165 7FF1FC53 B92DC181 48A1D65D FC2D4B1F A3D67728 4ADDD200 126D9069'H,
    cost         12
  }

examplePreimageFulfillment Fulfillment ::= 
  preimageSha256 : { 
    preimage '48656C6C 6F20576F 726C6421'H 
  }
]]></artwork></figure>

</section>
</section>
<section anchor="prefix-sha-256-condition-type" title="PREFIX-SHA-256">
<t>PREFIX-SHA-256 is assigned the type ID 1. It relies on the availability of the SHA-256 digest algorithm and any other algorithms required by its sub-crypto-condition as it is a compound crypto-condition type.</t>

<t>Prefix crypto-conditions provide a way to narrow the scope of other crypto-conditions that are used inside the prefix crypto-condition as a sub-crypto-condition.</t>

<t>Because a condition is the fingerprint of a public key, by creating a prefix crypto-condition that wraps another crypto-condition we can narrow the scope from signing an arbitrary message to signing a message with a specific prefix.</t>

<t>We can also use the prefix condition in contexts where there is an empty message used for validation of the fulfillment so that we can reuse the same key pair for multiple crypto-conditions, each with a different prefix, and therefore generate a unique condition and fulfillment each time.</t>

<t>Implementations MUST prepend the prefix to the provided message and will use the resulting value as the message to validate the sub-fulfillment.</t>

<section anchor="prefix-sha-256-condition-type-cost" title="Cost">

<t>The cost is the size, in bytes, of the <spanx style="strong">unencoded</spanx> prefix, plus the maximum message that will be accepted to be prefixed and validated by the subcondition, plus the cost of the sub-condition, plus the constant 1024.</t>

<figure><artwork><![CDATA[
cost = prefix.length (in bytes) + max_message_length + subcondition_cost + 1024
]]></artwork></figure>

</section>
<section anchor="prefix-sha-256-condition-asn1" title="ASN.1">

<figure><artwork><![CDATA[
-- Condition Fingerprint
PrefixFingerprintContents ::= SEQUENCE {
  prefix               OCTET STRING,
  maxMessageLength     INTEGER (0..4294967295),
  subcondition         Condition
}

-- Fulfillment 
PrefixFulfillment ::= SEQUENCE {
  prefix               OCTET STRING,
  maxMessageLength     INTEGER (0..4294967295),
  subfulfillment       Fulfillment
}
]]></artwork></figure>

</section>
<section anchor="prefix-sha-256-condition-type-condition" title="Condition Format">

<t>The fingerprint of a PREFIX-SHA-256 condition is the SHA-256 digest of the DER encoded fingerprint contents which are a SEQUENCE of:</t>

<t><list style="hanging">
  <t hangText='prefix'>
  An arbitrary octet string which will be prepended to the message during validation of the sub-fulfillment.</t>
  <t hangText='maxMessageLength'>
  The maximum size, in bytes, of the message that will be accepted during validation of the fulfillment of this condition.</t>
  <t hangText='subcondition'>
  The condition derived from the sub-fulfillment of this crypto-condition.</t>
</list></t>

</section>
<section anchor="prefix-sha-256-condition-type-fulfillment" title="Fulfillment Format">

<t>The fulfillment of a PREFIX-SHA-256 crypto-condition is a PrefixFulfillment which is a SEQUENCE of:</t>

<t><list style="hanging">
  <t hangText='prefix'>
  An arbitrary octet string which will be prepended to the message during validation of the sub-fulfillment.</t>
  <t hangText='maxMessageLength'>
  The maximum size, in bytes, of the message that will be accepted during validation of the fulfillment of this condition.</t>
  <t hangText='subfulfillment'>
  A fulfillment that will be verified against the prefixed message.</t>
</list></t>

</section>
<section anchor="prefix-sha-256-condition-type-validating" title="Validating">

<t>A PREFIX-SHA-256 fulfillment is valid iff:</t>

<t><list style="numbers">
  <t>The size of M, in bytes, is less than or equal to F.maxMessageLength AND</t>
  <t>F.subfulfillment is valid, where the message used for validation of f is M prefixed by F.prefix AND</t>
  <t>D is equal to C</t>
</list></t>

</section>
<section anchor="prefix-sha-256-example" title="Example">

<figure><artwork><![CDATA[
examplePrefixCondition Condition ::=
  prefixSha256 : {
    fingerprint 'BB1AC526 0C0141B7 E54B26EC 2330637C 5597BF81 1951AC09 E744AD20 FF77E287'H,
    cost         1024,
    subtypes    { preimageSha256 }
  }

examplePrefixFulfillment Fulfillment ::= 
  prefixSha256 : {
    prefix           ''H,
    maxMessageLength  0,
    subfulfillment    preimageSha256 : { preimage ''H }
  }

examplePrefixFingerprintContents PrefixFingerprintContents ::= {
  prefix           ''H,
  maxMessageLength  0,
  subcondition      preimageSha256 : {
    fingerprint      'E3B0C44298FC1C149AFBF4C8996FB92427AE41E4649B934CA495991B7852B855'H,
    cost              0
  }
}
]]></artwork></figure>

<t>Note that the example given, while useful to demonstrate the structure, has less practical security value that the use of an RSA-SHA-256 or ED25519-SHA-256 subfulfillment. Since the subfulfillment is a PREIMAGE-SHA-256, the validation of which ignores the incoming message, as long as the prefix, maxMessagelength and preimage provided in the subfulfillment are correct, the parent PREFIX-SHA-256 fulfillment will validate.</t>

<t>In this case, wrapping the PREIMAGE-SHA-256 crypto-condition in the PREFIX-SHA-256 crypto-condition, has the effect of enforcing a message length of 0 bytes.</t>

<t>Note also, any change to the PREFIX-SHA-256 crypto-condition's prefix and maxMessageLength values result in a different fingerprint value, effectively namespacing the underlying preimage and re-hashing it. The result is a new crypto-condition with a new and unique fingerprint with no change to the underlying sub-crypto-condition.</t>

</section>
</section>
<section anchor="threshold-sha-256-condition-type" title="THRESHOLD-SHA-256">
<t>THRESHOLD-SHA-256 is assigned the type ID 2. It relies on the availability of the SHA-256 digest algorithm and any other algorithms required by any of its sub-crypto-conditions as it is a compound crypto-condition type.</t>

<section anchor="threshold-sha-256-condition-type-cost" title="Cost">

<t>The cost is the sum of the F.threshold largest cost values of all sub-conditions, added to 1024 times the total number of sub-conditions.</t>

<figure><artwork><![CDATA[
cost = (sum of largest F.threshold subcondition.cost values) + 1024 * F.subconditions.count
]]></artwork></figure>

<t>For example, if a threshold crypto-condition contains 5 sub-conditions with costs of 64, 64, 82, 84 and 84 and has a threshold of 3, the cost is equal to the sum of the largest three sub-condition costs (82 + 84 + 84 = 250) plus 1024 times the number of sub-conditions (1024 * 5 = 5120): 5370</t>

</section>
<section anchor="threshold-sha-256-condition-asn1" title="ASN.1">

<figure><artwork><![CDATA[
-- Condition Fingerprint
ThresholdFingerprintContents ::= SEQUENCE {
  threshold            INTEGER (1..65535),
  subconditions        SET OF Condition
}

-- Fulfillment 
ThresholdFulfillment ::= SEQUENCE {
  subfulfillments      SEQUENCE OF Fulfillment,
  subconditions        SEQUENCE OF Condition
}
]]></artwork></figure>

</section>
<section anchor="threshold-sha-256-condition-type-condition" title="Condition Format">

<t>The fingerprint of a THRESHOLD-SHA-256 condition is the SHA-256 digest of the DER encoded fingerprint contents which are a SEQUENCE of:</t>

<t><list style="hanging">
  <t hangText='threshold'>
  A number that MUST be an integer in the range 1 … 65535. In order to fulfill a threshold condition, the count of the sub-fulfillments MUST be equal to the threshold.</t>
  <t hangText='subconditions'>
  The set of sub-conditions, F.threshold of which MUST be satisfied by valid sub-fulfillments provided in the fulfillment. The SET of DER encoded sub-conditions is sorted according to the DER encoding rules for a SET, in lexicographic (big-endian) order, smallest first as defined in section 11.6 of <xref target="itu.X690.2015"></xref>.</t>
</list></t>

</section>
<section anchor="threshold-sha-256-condition-type-fulfillment" title="Fulfillment Format">

<t>The fulfillment of a THRESHOLD-SHA-256 crypto-condition is a ThresholdFulfillment which is a SEQUENCE of:</t>

<t><list style="hanging">
  <t hangText='subfulfillments'>
  A SEQUENCE of fulfillments. The number of elements in this set is equal to the threshold therefore implementations must use the length of this SEQUENCE as the threshold value when deriving the fingerprint of this crypto-condition.</t>
  <t hangText='subconditions'>
  A SEQUENCE of conditions. This is the list of unfulfilled sub-conditions. This list must be combined with the list of conditions derived from the subfulfillments and the combined list, sorted, and used as the subconditions value when deriving the fingerprint of this crypto-condition.</t>
  <t>This may be an empty list.</t>
</list></t>

<t>SEQUENCE OF is used instead of SET OF, because a correct DER decoder should reject SET OF values that aren't in canonical order, but most don't, so there is a risk of inconsistent behavior. By using SEQUENCE OF it is possible to ensure that all implementations consistently accept any arbitrary ordering.</t>

</section>
<section anchor="threshold-sha-256-condition-type-validating" title="Validating">

<t>A THRESHOLD-SHA-256 fulfillment is valid iff :</t>

<t><list style="numbers">
  <t>All F.subfulfillments are valid.</t>
  <t>D is equal to C.</t>
</list></t>

</section>
<section anchor="threshold-sha-256-example" title="Example">

<figure><artwork><![CDATA[
exampleThresholdCondition Condition ::=
  thresholdSha256 : {
    fingerprint 'B4B84136 DF48A71D 73F4985C 04C6767A 778ECB65 BA7023B4 506823BE EE7631B9'H,
    cost         1024,
    subtypes    { preimageSha256 }
  }

exampleThresholdFulfillment Fulfillment ::=
  thresholdSha256 : {
    subfulfillments { preimageSha256 : { preimage ''H } },
    subconditions   { }
  }

exampleThresholdFingerprintContents ThresholdFingerprintContents ::= {
  threshold 1,
  subconditions {
    preimageSha256 : {
      fingerprint 'E3B0C442 98FC1C14 9AFBF4C8 996FB924 27AE41E4 649B934C A495991B 7852B855'H,
      cost         0
    }
  }
}

exampleThresholdCondition2 Condition ::=
  thresholdSha256 : {
    fingerprint '5A218ECE 7AC4BC77 157F04CB 4BC8DFCD 5C9D225A 55BD0AA7 60BCA2A4 F1773DC6'H,
    cost         2060,
    subtypes    { preimageSha256 }
  }

exampleThresholdFulfillment2 Fulfillment ::=
  thresholdSha256 : {
    subfulfillments { preimageSha256 : { preimage ''H } },
    subconditions {
      preimageSha256 : { 
        fingerprint '7F83B165 7FF1FC53 B92DC181 48A1D65D FC2D4B1F A3D67728 4ADDD200 126D9069'H,
        cost         12
      }
    }
  }

exampleThresholdFingerprintContents2 ThresholdFingerprintContents ::= {
  threshold 1,
  subconditions {
    preimageSha256 : {
      fingerprint 'E3B0C442 98FC1C14 9AFBF4C8 996FB924 27AE41E4 649B934C A495991B 7852B855'H,
      cost         0
    },
    preimageSha256 : {
      fingerprint '7F83B165 7FF1FC53 B92DC181 48A1D65D FC2D4B1F A3D67728 4ADDD200 126D9069'H,
      cost         12
    }
  }
}
]]></artwork></figure>

</section>
</section>
<section anchor="rsa-sha-256-condition-type" title="RSA-SHA-256">
<t>RSA-SHA-256 is assigned the type ID 3. It relies on the SHA-256 digest algorithm and the RSA-PSS signature scheme.</t>

<t>The signature algorithm used is RSASSA-PSS as defined in PKCS#1 v2.2. <xref target="RFC8017"></xref></t>

<t>Implementations MUST NOT use the default RSASSA-PSS-params. Implementations MUST use the SHA-256 hash algorithm and therefore, the same algorithm in the mask generation algorithm, as recommended in <xref target="RFC8017"></xref>. The algorithm parameters to use, as defined in <xref target="RFC4055"></xref> are:</t>

<figure><artwork><![CDATA[
pkcs-1 OBJECT IDENTIFIER  ::=  { iso(1) member-body(2) us(840) rsadsi(113549) pkcs(1) 1 }

id-sha256 OBJECT IDENTIFIER  ::=  { joint-iso-itu-t(2) country(16) us(840) organization(1) gov(101) csor(3) nistalgorithm(4) hashalgs(2) 1 }

sha256Identifier AlgorithmIdentifier  ::=  {
  algorithm            id-sha256,
  parameters           nullParameters  
}
                          
id-mgf1 OBJECT IDENTIFIER  ::=  { pkcs-1 8 }                          
                          
mgf1SHA256Identifier AlgorithmIdentifier  ::=  {
  algorithm            id-mgf1,
  parameters           sha256Identifier 
}

rSASSA-PSS-SHA256-Params RSASSA-PSS-params ::=  {
  hashAlgorithm        sha256Identifier,
  maskGenAlgorithm     mgf1SHA256Identifier,
  saltLength           20,
  trailerField         1
}
]]></artwork></figure>

<section anchor="rsa-keys" title="RSA Keys">

<t>To optimize the RsaFulfillment, and enforce a public exponent value of 65537, only the RSA Public Key modulus is stored in the RsaFingerprintContents and RsaFulfillment.</t>

<t>The modulus is stored as an OCTET STRING representing an unsigned integer (i.e. no sign byte) in big-endian byte-order, the most significant byte being the first in the string.</t>

<t>Implementations MUST use moduli greater than 128 bytes (1017 bits) and smaller than or equal to 512 bytes (4096 bits.) Large moduli slow down signature verification which can be a denial-of-service vector. DNSSEC also limits the modulus to 4096 bits <xref target="RFC3110"></xref>. OpenSSL supports up to 16384 bits <xref target="OPENSSL-X509-CERT-EXAMPLES"></xref>.</t>

<t>Implementations MUST use the value 65537 for the public exponent e as recommended in <xref target="RFC4871"></xref>. Very large exponents can be a DoS vector <xref target="LARGE-RSA-EXPONENTS"></xref> and 65537 is the largest Fermat prime, which has some nice properties <xref target="USING-RSA-EXPONENT-OF-65537"></xref>.</t>

<t>The recommended modulus size as of 2016 is 2048 bits <xref target="KEYLENGTH-RECOMMENDATION"></xref>. In the future we anticipate an upgrade to 3072 bits which provides approximately 128 bits of security <xref target="NIST-KEYMANAGEMENT"></xref> (p. 64), about the same level as SHA-256.</t>

</section>
<section anchor="rsa-sha-256-condition-type-cost" title="Cost">

<t>The cost is the square of the RSA key modulus size (in bits) divided by the constant 64.</t>

<figure><artwork><![CDATA[
cost = ( (modulus size in bits) ^ 2 ) / 64 
]]></artwork></figure>

</section>
<section anchor="rsa-sha-256-condition-asn1" title="ASN.1">

<figure><artwork><![CDATA[
-- Condition Fingerprint
RsaFingerprintContents ::= SEQUENCE {
  modulus              OCTET STRING
}

-- Fulfillment 
RsaSha256Fulfillment ::= SEQUENCE {
  modulus              OCTET STRING,
  signature            OCTET STRING
}
]]></artwork></figure>

</section>
<section anchor="rsa-sha-256-condition-type-condition" title="Condition Format">
<t>The fingerprint of an RSA-SHA-256 condition is the SHA-256 digest of the DER encoded fingerprint contents which is a SEQUENCE of a single element, the modulus of the RSA Key Pair.</t>

</section>
<section anchor="rsa-sha-256-condition-type-fulfillment" title="Fulfillment Format">

<t>The fulfillment of an RSA-SHA-256 crypto-condition is an RsaSha256Fulfillment which is a SEQUENCE of:</t>

<t><list style="hanging">
  <t hangText='modulus'>
  The modulus of the RSA key pair used to sign and verify the signature provided.</t>
  <t hangText='signature'>
  An octet string representing the RSA signature on the message M.</t>
  <t>Implementations MUST verify that the signature is numerically less than the modulus.</t>
</list></t>

<t>Note that the message that has been signed is provided separately. If no message is provided, the message is assumed to be an octet string of length zero.</t>

</section>
<section anchor="rsa-sha-256-condition-type-validating" title="Validating">

<t>An RSA-SHA-256 fulfillment is valid iff :</t>

<t><list style="numbers">
  <t>F.signature is valid for the message M, using the RSA public key with modulus = F.modulus and exponent = 65537 for verification.</t>
  <t>D is equal to C.</t>
</list></t>

</section>
<section anchor="rsa-sha-256-example" title="Example">

<figure><artwork><![CDATA[
exampleRsaCondition Condition ::=
  rsaSha256 : {
    fingerprint 'B31FA820 6E4EA7E5 15337B3B 33082B87 76518010 85ED84FB 4DAEB247 BF698D7F'H,
    cost         65536
  }

exampleRsaSha256Fulfillment Fulfillment ::=
  rsaSha256 : {
    modulus   'E1EF8B24 D6F76B09 C81ED775 2AA262F0 44F04A87 4D43809D 31CEA612 F99B0C97 A8B43741 
               53E3EEF3 D6661684 3E0E41C2 93264B71 B6173DB1 CF0D6CD5 58C58657 706FCF09 7F704C48 
               3E59CBFD FD5B3EE7 BC80D740 C5E0F047 F3E85FC0 D7581577 6A6F3F23 C5DC5E79 7139A688 
               2E38336A 4A5FB361 37620FF3 663DBAE3 28472801 862F72F2 F87B202B 9C89ADD7 CD5B0A07 
               6F7C53E3 5039F67E D17EC815 E5B4305C C6319706 8D5E6E57 9BA6DE5F 4E3E57DF 5E4E072F 
               F2CE4C66 EB452339 73875275 9639F025 7BF57DBD 5C443FB5 158CCE0A 3D36ADC7 BA01F33A 
               0BB6DBB2 BF989D60 7112F234 4D993E77 E563C1D3 61DEDF57 DA96EF2C FC685F00 2B638246
               A5B309B9'H,
    signature '48E8945E FE007556 D5BF4D5F 249E4808 F7307E29 511D3262 DAEF61D8 8098F9AA 4A8BC062 
               3A8C9757 38F65D6B F459D543 F289D73C BC7AF4EA 3A33FBF3 EC444044 7911D722 94091E56 
               1833628E 49A772ED 608DE6C4 4595A91E 3E17D6CF 5EC3B252 8D63D2AD D6463989 B12EEC57 
               7DF64709 60DF6832 A9D84C36 0D1C217A D64C8625 BDB594FB 0ADA086C DECBBDE5 80D424BF 
               9746D2F0 C312826D BBB00AD6 8B52C4CB 7D47156B A35E3A98 1C973863 792CC80D 04A18021 
               0A524158 65B64B3A 61774B1D 3975D78A 98B0821E E55CA0F8 6305D425 29E10EB0 15CEFD40 
               2FB59B2A BB8DEEE5 2A6F2447 D2284603 D219CD4E 8CF9CFFD D5498889 C3780B59 DD6A57EF 
               7D732620'H
  }

exampleRsaFingerprintContents RsaFingerprintContents ::= {
  modulus     'E1EF8B24 D6F76B09 C81ED775 2AA262F0 44F04A87 4D43809D 31CEA612 F99B0C97 A8B43741 
               53E3EEF3 D6661684 3E0E41C2 93264B71 B6173DB1 CF0D6CD5 58C58657 706FCF09 7F704C48 
               3E59CBFD FD5B3EE7 BC80D740 C5E0F047 F3E85FC0 D7581577 6A6F3F23 C5DC5E79 7139A688 
               2E38336A 4A5FB361 37620FF3 663DBAE3 28472801 862F72F2 F87B202B 9C89ADD7 CD5B0A07 
               6F7C53E3 5039F67E D17EC815 E5B4305C C6319706 8D5E6E57 9BA6DE5F 4E3E57DF 5E4E072F 
               F2CE4C66 EB452339 73875275 9639F025 7BF57DBD 5C443FB5 158CCE0A 3D36ADC7 BA01F33A 
               0BB6DBB2 BF989D60 7112F234 4D993E77 E563C1D3 61DEDF57 DA96EF2C FC685F00 2B638246
               A5B309B9'H
}
]]></artwork></figure>

</section>
</section>
<section anchor="ed25519-sha-256-condition-type" title="ED25519-SHA256">
<t>ED25519-SHA-256 is assigned the type ID 4. It relies on the SHA-256 and SHA-512 digest algorithms and the ED25519 signature scheme.</t>

<t>The exact algorithm and encodings used for the public key and signature are defined in <xref target="I-D.irtf-cfrg-eddsa"></xref> as Ed25519. SHA-512 is used as the hashing function for this signature scheme.</t>

<section anchor="ed25519-sha-256-condition-type-cost" title="Cost">

<t>The public key and signature are a fixed size therefore the cost for an ED25519 crypto-condition is fixed at 131072.</t>

<figure><artwork><![CDATA[
cost = 131072
]]></artwork></figure>

</section>
<section anchor="ed25519-sha-256-condition-asn1" title="ASN.1">

<figure><artwork><![CDATA[
-- Condition Fingerprint
Ed25519Sha512Fulfillment ::= SEQUENCE {
  publicKey            OCTET STRING (SIZE(32)),
  signature            OCTET STRING (SIZE(64))
}

-- Fulfillment 
Ed25519FingerprintContents ::= SEQUENCE {
  publicKey            OCTET STRING (SIZE(32))
}
]]></artwork></figure>

</section>
<section anchor="ed25519-sha-256-condition-type-condition" title="Condition Format">

<t>The fingerprint of an ED25519-SHA-256 condition is the SHA-256 digest of the DER encoded Ed25519 public key included as the only value within a SEQUENCE. While the public key is already very small and constant size, we wrap it in a SEQUENCE type and hash it for consistency with the other types.</t>

</section>
<section anchor="ed25519-sha-256-condition-type-fulfillment" title="Fulfillment">

<t>The fulfillment of an ED25519-SHA-256 crypto-condition is an Ed25519Sha512Fulfillment which is a SEQUENCE of:</t>

<t><list style="hanging">
  <t hangText='publicKey'>
  An octet string containing the Ed25519 public key.</t>
  <t hangText='signature'>
  An octet string containing the Ed25519 signature.</t>
</list></t>

</section>
<section anchor="ed25519-sha-256-condition-type-validating" title="Validating">

<t>An ED25519-SHA-256 fulfillment is valid iff :</t>

<t><list style="numbers">
  <t>F.signature is valid for the message M, given the ED25519 public key F.publicKey.</t>
  <t>D is equal to C.</t>
</list></t>

</section>
<section anchor="example" title="Example">

<figure><artwork><![CDATA[
exampleEd25519Condition Condition ::=
  ed25519Sha256 : {
    fingerprint '799239AB A8FC4FF7 EABFBC4C 44E69E8B DFED9933 24E12ED6 4792ABE2 89CF1D5F'H,
    cost 131072
  }

exampleEd25519Fulfillment Fulfillment ::=
  ed25519Sha256 : {
    publicKey  'D75A9801 82B10AB7 D54BFED3 C964073A 0EE172F3 DAA62325 AF021A68 F707511A'H,
    signature  'E5564300 C360AC72 9086E2CC 806E828A 84877F1E B8E5D974 D873E065 22490155 
                5FB88215 90A33BAC C61E3970 1CF9B46B D25BF5F0 595BBE24 65514143 8E7A100B'H
  }

exampleEd25519FingerprintContents Ed25519FingerprintContents ::= {
  publicKey    'D75A9801 82B10AB7 D54BFED3 C964073A 0EE172F3 DAA62325 AF021A68 F707511A'H
}
]]></artwork></figure>

</section>
</section>
</section>
<section anchor="uri-encoding-rules" title="URI Encoding Rules">

<t>Conditions can be encoded as URIs per the rules defined in the Named Information specification, <xref target="RFC6920"></xref>. There are no URI encoding rules for fulfillments.</t>

<t>Applications that require a string encoding for fulfillments MUST use an appropriate string encoding of the DER encoded binary representation of the fulfillment. No string encoding is defined in this specification. For consistency with the URI encoding of conditions, BASE64URL is recommended as described in <xref target="RFC4648"></xref>, Section 5.</t>

<t>The URI encoding is only used to encode top-level conditions and never for sub-conditions. The binary encoding is considered the canonical encoding.</t>

<section anchor="string-condition-format" title="Condition URI Format">

<t>Conditions are represented as URIs using the rules defined in <xref target="RFC6920"></xref> where the object being hashed is the DER encoded fingerprint content of the condition as described for the specific condition type.</t>

<t>While <xref target="RFC6920"></xref> allows for truncated hashes, implementations using the Named Information URI schemes for crypto-conditions MUST only use untruncated SHA-256 hashes (Hash Name: sha-256, ID: 1 from the "Named Information Hash Algorithm Registry" defined in <xref target="RFC6920"></xref>).</t>

</section>
<section anchor="new-uri-parameter-definitions" title="New URI Parameter Definitions">

<t><xref target="RFC6920"></xref> established the IANA registry of "Named Information URI Parameter Definitions". This specification defines three new definitions that are added to that registry and passed in URI encoded conditions as query string parameters.</t>

<section anchor="parameter-fingerprint-type-fpt" title="Parameter: Fingerprint Type (fpt)">

<t>The type parameter indicates the type of condition that is represented by the URI. The value MUST be one of the names from the <xref target="crypto-conditions-type-registry">Crypto-Condition Type Registry</xref>.</t>

</section>
<section anchor="parameter-cost-cost" title="Parameter: Cost (cost)">

<t>The cost parameter is the cost of the condition that is represented by the URI.</t>

</section>
<section anchor="parameter-subtypes-subtypes" title="Parameter: Subtypes (subtypes)">

<t>The subtypes parameter indicates the types of conditions that are subtypes of the condition represented by the URI. The value MUST be a comma seperated list of names from the <xref target="crypto-conditions-type-registry">Crypto-Condition Type Registry</xref> and SHOULD not include the type of the root crypto-condition. i.e. The value of the fpt paramtere should not appear in the list of types provided as the value of the subtypes parameter.</t>

</section>
</section>
</section>
<section anchor="example-condition" title="Example Condition">

<t>An example condition (PREIMAGE-SHA-256):</t>

<figure><artwork><![CDATA[
0x00000000 A0 25 80 20 7F 83 B1 65 7F F1 FC 53 B9 2D C1 81 .%.....e...S.-..
0x00000010 48 A1 D6 5D FC 2D 4B 1F A3 D6 77 28 4A DD D2 00 H..].-K...w(J...
0x00000020 12 6D 90 69 81 01 0C                            .m.i...

ni:///sha-256;f4OxZX_x_FO5LcGBSKHWXfwtSx-j1ncoSt3SABJtkGk?fpt=preimage-sha-256&cost=12
]]></artwork></figure>

<t>The example has the following attributes:</t>

<texttable>
      <ttcol align='left'>Field</ttcol>
      <ttcol align='left'>Value</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>scheme</c>
      <c><spanx style="verb">ni://</spanx></c>
      <c>The named information scheme.</c>
      <c>hash function name</c>
      <c><spanx style="verb">sha-256</spanx></c>
      <c>The fingerprint is hashed with the SHA-256 digest function</c>
      <c>fingerprint</c>
      <c><spanx style="verb">f4OxZX_x_FO5LcGBSKHWXfwtSx-j1ncoSt3SABJtkGk</spanx></c>
      <c>The fingerprint for this condition.</c>
      <c>type</c>
      <c><spanx style="verb">preimage-sha-256</spanx></c>
      <c>This is a <xref target="preimage-sha-256-condition-type">PREIMAGE-SHA-256</xref> condition.</c>
      <c>cost</c>
      <c><spanx style="verb">12</spanx></c>
      <c>The fulfillment payload is 12 bytes long, therefore the cost is 12.</c>
</texttable>

</section>


  </middle>

  <back>

    <references title='Normative References'>

&RFC3280;
&RFC4055;
&RFC4648;
&RFC6920;
&RFC8017;
&I-D.draft-irtf-cfrg-eddsa-08;
<reference anchor="itu.X680.2015" target="http://handle.itu.int/11.1002/1000/12479">
  <front>
    <title>Information technology – Abstract Syntax Notation One (ASN.1): Specification of basic notation</title>
    <author >
      <organization>International Telecommunications Union</organization>
    </author>
    <date year="2015" month="August"/>
  </front>
</reference>
<reference anchor="itu.X690.2015" target="http://handle.itu.int/11.1002/1000/12483">
  <front>
    <title>Information technology – ASN.1 encoding rules: Specification of Basic Encoding Rules (BER), Canonical Encoding Rules (CER) and Distinguished Encoding Rules (DER)</title>
    <author >
      <organization>International Telecommunications Union</organization>
    </author>
    <date year="2015" month="August"/>
  </front>
</reference>


    </references>

    <references title='Informative References'>

&RFC2119;
&RFC3110;
&RFC4871;
<reference anchor="LARGE-RSA-EXPONENTS" target="https://www.imperialviolet.org/2012/03/17/rsados.html">
  <front>
    <title>Imperial Violet - Very large RSA public exponents (17 Mar 2012)</title>
    <author fullname="Adam Langley">
      <organization></organization>
    </author>
    <date year="2012" month="March" day="17"/>
  </front>
</reference>
<reference anchor="USING-RSA-EXPONENT-OF-65537" target="https://crypto.stackexchange.com/questions/3110/impacts-of-not-using-rsa-exponent-of-65537">
  <front>
    <title>Cryptography - StackExchange - Impacts of not using RSA exponent of 65537</title>
    <author fullname="http://crypto.stackexchange.com/users/555/fgrieu">
      <organization></organization>
    </author>
    <date year="2014" month="November" day="18"/>
  </front>
</reference>
<reference anchor="KEYLENGTH-RECOMMENDATION" target="https://www.keylength.com/en/compare/">
  <front>
    <title>BlueKrypt - Cryptographic Key Length Recommendation</title>
    <author fullname="Damien Giry">
      <organization></organization>
    </author>
    <date year="2015" month="September" day="17"/>
  </front>
</reference>
<reference anchor="NIST-KEYMANAGEMENT" target="http://csrc.nist.gov/publications/nistpubs/800-57/sp800-57_part1_rev3_general.pdf">
  <front>
    <title>NIST - Recommendation for Key Management - Part 1 - General (Revision 3)</title>
    <author fullname="Elaine Barker">
      <organization></organization>
    </author>
    <author fullname="William Barker">
      <organization></organization>
    </author>
    <author fullname="William Burr">
      <organization></organization>
    </author>
    <author fullname="William Polk">
      <organization></organization>
    </author>
    <author fullname="Miles Smid">
      <organization></organization>
    </author>
    <date year="2012" month="July"/>
  </front>
</reference>
<reference anchor="OPENSSL-X509-CERT-EXAMPLES" target="http://fm4dd.com/openssl/certexamples.htm">
  <front>
    <title>OpenSSL - X509 certificate examples for testing and verification</title>
    <author fullname="FM4DD">
      <organization></organization>
    </author>
    <date year="2012" month="July"/>
  </front>
</reference>


    </references>


<section anchor="security-considerations" title="Security Considerations">

<t>This specification has a normative dependency on a number of other specifications with extensive security considerations therefore the consideratons defined for SHA-256 hashing and RSA signatures in <xref target="RFC8017"></xref> and <xref target="RFC4055"></xref> and for ED25519 signatures in <xref target="I-D.irtf-cfrg-eddsa"></xref> must be considered.</t>

<t>The cost and subtypes values of conditions are provided to allow implementations to evaluate their ability to validate a fulfillment for the given condition later.</t>

</section>
<section anchor="test-values" title="Test Values">

<t>This section to be expanded in a later draft.  <!-- TODO --></t>

<t>For now, see the test cases for the reference implementation: <eref target="https://github.com/interledger/five-bells-condition/tree/master/test">https://github.com/interledger/five-bells-condition/tree/master/test</eref></t>

</section>
<section anchor="appendix-c" title="ASN.1 Module">

<figure><artwork><![CDATA[
--<ASN1.PDU CryptoConditions.Condition, CryptoConditions.Fulfillment>--
]]></artwork></figure>

<t>Crypto-Conditions DEFINITIONS AUTOMATIC TAGS ::= BEGIN</t>

<figure><artwork><![CDATA[
-- Conditions

Condition ::= CHOICE {
  preimageSha256   [0] SimpleSha256Condition,
  prefixSha256     [1] CompoundSha256Condition,
  thresholdSha256  [2] CompoundSha256Condition,
  rsaSha256        [3] SimpleSha256Condition,
  ed25519Sha256    [4] SimpleSha256Condition
}

SimpleSha256Condition ::= SEQUENCE {
  fingerprint          OCTET STRING (SIZE(32)),
  cost                 INTEGER (0..4294967295)
}

CompoundSha256Condition ::= SEQUENCE {
  fingerprint          OCTET STRING (SIZE(32)),
  cost                 INTEGER (0..4294967295),
  subtypes             ConditionTypes
}

ConditionTypes ::= BIT STRING {
  preImageSha256   (0),
  prefixSha256     (1),
  thresholdSha256  (2),
  rsaSha256        (3),
  ed25519Sha256    (4)
}

-- Fulfillments

Fulfillment ::= CHOICE {
  preimageSha256   [0] PreimageFulfillment ,
  prefixSha256     [1] PrefixFulfillment,
  thresholdSha256  [2] ThresholdFulfillment,
  rsaSha256        [3] RsaSha256Fulfillment,
  ed25519Sha256    [4] Ed25519Sha512Fulfillment
}

PreimageFulfillment ::= SEQUENCE {
  preimage             OCTET STRING
}

PrefixFulfillment ::= SEQUENCE {
  prefix               OCTET STRING,
  maxMessageLength     INTEGER (0..4294967295),
  subfulfillment       Fulfillment
}

ThresholdFulfillment ::= SEQUENCE {
  subfulfillments      SEQUENCE OF Fulfillment,
  subconditions        SEQUENCE OF Condition
}

RsaSha256Fulfillment ::= SEQUENCE {
  modulus              OCTET STRING,
  signature            OCTET STRING
}

Ed25519Sha512Fulfillment ::= SEQUENCE {
  publicKey            OCTET STRING (SIZE(32)),
  signature            OCTET STRING (SIZE(64))
}

-- Fingerprint Content

-- The PREIMAGE-SHA-256 condition fingerprint content is not DER encoded
-- The fingerprint content is the preimage

PrefixFingerprintContents ::= SEQUENCE {
  prefix               OCTET STRING,
  maxMessageLength     INTEGER (0..4294967295),
  subcondition         Condition
}

ThresholdFingerprintContents ::= SEQUENCE {
  threshold            INTEGER (1..65535),
  subconditions        SET OF Condition
}

RsaFingerprintContents ::= SEQUENCE {
  modulus              OCTET STRING
}

Ed25519FingerprintContents ::= SEQUENCE {
  publicKey            OCTET STRING (SIZE(32))
}
]]></artwork></figure>

<t>END</t>

</section>
<section anchor="appendix-e" title="IANA Considerations">

<section anchor="crypto-conditions-type-registry" title="Crypto-Condition Type Registry">

<t>The following initial entries should be added to the Crypto-Condition Type registry to be created and maintained at (the suggested URI)
<eref target="http://www.iana.org/assignments/crypto-condition-types">http://www.iana.org/assignments/crypto-condition-types</eref>:</t>

<t>The following types are registered:</t>

<texttable title="Crypto-Condition Types" anchor="crypto-condition-types-table">
      <ttcol align='left'>Type ID</ttcol>
      <ttcol align='left'>Type Name</ttcol>
      <c>0</c>
      <c>PREIMAGE-SHA-256</c>
      <c>1</c>
      <c>PREFIX-SHA-256</c>
      <c>2</c>
      <c>THRESHOLD-SHA-256</c>
      <c>3</c>
      <c>RSA-SHA-256</c>
      <c>4</c>
      <c>ED25519</c>
</texttable>

</section>
</section>


  </back>

<!-- ##markdown-source:
H4sIAAAVWVgAA+196XLjyJngfz1FblXstlhDUgAIXhq3Z3iAVZouSTWSyu6Z
it42REISXCRAA6BUdLsj9h32DfdJ9jsyE4mLktvtsb3biuhqiQTy+PK7r+x0
OkfLeBVG96dil911RkdHWZitg1MxS/bbLO7M4mgVZmEcpUereBn5G/hqlfh3
WSd7iDd+2lnyc0v9XMdyjpZ+FtzHyf5UpNnq6GgbnopPWbxsizROsiS4S+G3
/YZ/WcabTRBl6XdH6cZPsu//sIuzID0V8d3d0ZGfBD4MEix3SZjtj/wdzJqc
HgnRgf+ECCN48Lorbmgt9BEv8ToL7vzI/DxOYItX4Xa7DujvFNYRZKeiZ1ni
PI6y+3gTJHt4ET+mJ5YwI4wEwywSP1qG6TKmz5PgHvYJEJrwY/EKJhy7tuXK
v3dRhlv/eE1/bx/iCB7olH/oy2Djh2uEEi73XxNaXhcgQl/Cnk/FQ5Zt09OT
k6enp67xfREEV11xBauKgvU6NKBwBXsqffF3DYYEJv/pQJh0xbt4G3SmMFYY
GGCYrJIQll/+8u8aFD6t+c8CRhQnGz8LH4NTevZqMes5I0v/4Vr9fv7HwB3p
PwZjJ39sZNlD/uOsM+8yqYcJsIblXXLfCVar1O9Y8t0w23W/HYysrmPZcmz8
kRzk1Vl0x0uKI5EFy4coXsf3e/F//tf/FpNbgLa/zMT1Psr8L+Iizvi5yygQ
x5Pri67dAkhvg2V4Fy75q/hO3PppuBSRfPhVPqOf3OPRIWgAMg9+tAKo4PLC
KDux7a5tWc4J/GOd2I47HOsXc4aS/wBe+FH4R5riVJxFWZBE9Ie/FjfBOkCG
tYvkqlLxMYL/6QFWwPlOBcIDoKQ/TYMkDFKER3Eqxs9XZzcfOzevCt88+usd
fnUVMH9cMQzoSfFtF4DeFpPd/S7NaLJXxnmMf8p5IMRFELEsEMlujSy4Av8p
wd9Tj13hY+J46l212mLmRzFCZV35fgbfCzgSMQ/TDD7fhelDsKo8NofHfuqR
jnr/+Ec6Lh/pUagOzKBpx7bHOYHbtkHgo6HNf7yfXL31OlfXk4737YfLC+/i
5rqCDWebLewA9v+bMF4HmeiI3yC3WyPYBbwqtrvbNRx28GUL3Arkszi2h+Lc
T3BxTqv2nBRXCuXYjzR0F6B/gi+dWL0Te3iSpP4qTrsP2WZ98NDuduu1YuD+
Rrz3o/t1sK8ei9Oxeh17SF98vD67eFvYeedy0Rn0+71hBQKs4dwn/vZhD9u/
zvzlZ+/LEjANINBBAAGDShHtgeGIXUqoCoBREMFvaORGWLBu1E1x5ECOjLz6
5A+7ICVUO8ETPAl5qk5814GpOjRVB8DUUVPhN8WpDgNMEk3j/DvA3vSk3++f
3N0DGu+qQHU7tt2xGd2/8f7jvXfx9uZd58qbXZ6fexfzyc3Z5UUFolNA8G9w
TgCfAV3Aom+CvXgfRPfZgyii/0E8+hzs1/QSLTqITuB/W1AJT14Ihrm/CYNI
vA2TGrQBah4rtLk4u77pwDbPJxeTtx5s8KayN3wEtlUiXqBP2tu5H/n3Aeqx
8MwHUGOFDb+8DaIgARI7vgoewxSf79UTDp5Vmiy7ETDI7n38eMLEx+zoBD+F
D9KTkWV1+sOTdMu/fA+wyOzvk+Cx9/09T9Xdru5qKeQw5nQMoHlrH/RFYPXJ
5yBpfOq3IWiUQJUvfWyXPP/Qh3j9ufGh8xCFxPUmXNEjlx+8i+vr951v+3CK
IGBugOAn5x/ee1VOd7kNIngURsOHxTJIMhZqAZCyv9niuHiOWUDSiSTVI/Av
JfiaTuxu465WhJmgWEZpuj7BodWQyN9eiKaLc3c+bzi1I9ALkf8E3y+CYHUL
hHx0dPMQpiItyGb4wBeIDsiUsodAfCIhtw5W90EiPiQxWF/x+rtjRV1h/i2x
55Z4ipPPXaEmAZV2DetYiSyG4SrTpQ/xbr0StwGIQUB5eOhXPNi/hkF2hyP+
ustL96Wih6sORMVYLI27Cu4A93AvaUBb0RoJC8KUDgcg5KO2vltmu0Qe3ps3
+aBv3tBjb94AiO8At8i8fPOmK8RE6KcEyHtgw+u9CFfwPayB5gWNiHSYV7cx
yC7Q9JdhstyF2St8k+cEqNyBpSKAM4NiITZxEvBr4h5ABhZtgJKeoHe7F0EI
x5Gg8A+RZyB+STAo3piG96CMwE5wNEK8PT6Gp7hNgnADjAVB4YsHP30Qq/Ae
8LQLWzF2x+dfhEsOO3OhDVMzYI0J9NQpLMTP5MnQovIZJK5JENEQ2yR+BICC
RbbdwXER+hTAI/z1On6SR0pfwuy7dVYeDN4E9NKgBHSq7FjCVMKZn2TIwYLN
seId8E965ebqoydu4Xd/ncb5g3LVq8IMgG/LB9p/PhIAAbB8mwD9tPkLhU+w
wOswWuolS405RRNcbs2EQhgVxj0G/pAGvCAQcMbBtORS/c8BHPEmSFPEBz9l
CNMgxRnpE0BoGMXcDQ6ApyzirVR8eQA14hPgwwOCaOunKRN+4MMn+aJx0iT4
ww5GXgH+Ae3u4Huczl/fxwng+QbfUqcCqzXn9+9BrABe+QYJIsLke8rh7RM2
xEQ4OXWk8O1GYqpfYSViCXsDteaR1gl0EAOGA0NfEoLgO3fr4Et4u0aE2679
JUtrREJ4OESebcz1BFMHxQNG2OwQMj6jhNSPQUeh0fGjwn75KT2k5Icgv8CO
OTp6jVZIEq+AklDEHM0qnJFImvdMq0TdJyYlVI/ZWYefgwInLPMl2DELtTIY
8YkiuYebEA2NtCvOMoMRbwLUG8N0o+g1NUbN35L0Cou8hRcZ4PdJvNsyKi2T
AFEC9wCnYKzGTxLUSolFE2HCwOs14AJQmC+JBKAOkEUi3aLsDlJmh+VDa8OW
YSfoHbhd79uSmGArIOo2YUTIYKAqbYLWzTy3eFwGvir8vId9Rihm9cHDmX6k
E6nItXYtjIhgADHQikAAeXOn37fHDTh+/W7i9AfqgPTCU8L020Ajo8lWENRK
Tmlol0RZKmkdh4E9F8byGc12MH2OuQJFtxJgqPTuoqXWfhkjqm+liuOYnMpg
nyV+34blrNfBqkhz7QKTJKTMOQee6Wa30TypAIgnABW+HCZSFBUmMAi1XeRC
XVZU9BaTADYTIWAUFENY25IFTSi3UNm8lk5IZoCQCEJkrYzBe9x7VRXawOjE
NPaFEwYiILxOl0HkJ2Gc8jmVmVgjpavjNsSIPJJ2AZlRBhmgb7WJxNRYxyWw
tUpwo78YWAasWLR3kd3dEBGSx4kgjDOCzrlKxavzj9c3r9r8f3FxSb9fef/+
8ezKm+PvQAjv3+tf1BPX7y4/vp/nv+VvShuVXz6f/McrXuuryw9otU7ev2Lp
Cweyipc75tbI7YmDkWYMyk/GBLEK0mUS3vI5fJL+l+8+fcd72m+DtIZ142io
icGsfrKSuqs8JRg6ZZ5hPB8VNI+UKU6+lu622zgBqt0AKEPkeDkraMOqlusd
aXmr8O4OhBZshvi6wmAevar2EaowgnRFdQsSA0EGZBIH1ezr4DFYw8xEYawi
4CcChFMK4nUP0z/i4PqFnCVI4spXmiEA66mBRoahzMdDdtytSeTlamsAbC7e
G88Vd2twTj81BR0c4WtxzVIEx5kpOuZzPbp5Am7Kkaywfpm0ASa9rhqpuhWl
ExsokevmdxQAQ/2lsGhDahCgH+AtjCus0MoDqxEAgUKme39AmAC+SRliSPpU
q25tJUH5FEhc7lKp48MUYCGtwEjc55gijmHCLg7a4lXlIM9XJR/CaWEBfdsR
tyBzWkQUKJsAEsisy6dVAiqezoT0VWlQsyjgpbJ2stJkDAI8NbTfok0JXF9v
C1beqZOpSPvsQcnKWp8hskAzuiOtlqCrJn0KmHeEUp/jWXDfPq3fX0tv82PA
q30i21lKLQZ7FDzJrQHNqd0Rv0Aq0KydsI1e2KCXmKgD5Xm+WrWJlfRXyqUA
MDVyV/ETfiVdy1Qc091tNbTLfGnZNBLgBMBamWwIEzK3YMjF5P21h9EbWFjM
Sp20yZTBUjFhGhZwJo/8yd83L4Q58E6aMblCdItRuwelP5bUImROBeuleZ+I
UrXro3m1MSnVV9MqMI3OOmVIT1kwawAp9MFikPMJGG7SNm3LtAFgoEjvyU0D
X5oShjgGvW88YKqvq2AbRNJ7oClPWfiGGp4dQogqDSuzFzCBDgHkCnm9K1pL
G+YFWbKpWXmCYilY8eHq86pXxNpkU7CXAW0K3FDU2ZS2y+TElsetcYDF8ZVT
gbTqLGj0FQBLuQ9BSsHy9Ug5SFgTDAkswH5BsvuowQW8eaR5EpwddObtlaRu
o0EaURwCcQ+/I3dVgvvyV3tcqZIy5rL2QfEF3iLoNGXvgDzJ+BGdyGvT6EUf
XLy7f+AodpB01Fir2ilZqM5JU5e+1GtWYPDPC8XnmtyBUucBeQUHEUS01Htk
hopwwAyQFAGqFIyOBLEgxUpi2D7e0RP+akVstcnXppRjZQdrfSk/ofx4boOl
jzLEXz0CB2H3zdIMH90hO4ftw5mDTAMJJ2Lg8YbmAbYkJrEQgw2jR4Q5rA6p
mO10EIZLEhH5OwDKM9wTgtXP2QsigTZ54NylfiiK56ZkOginO5wgJPdXFCxR
XU/2LLBW7AVn+4DfYKw0JpW0ISdBKZHg9hodPXwcxKMBNVO04apcjXdCShBs
glQJPrJQ+qbuwmC9aiOZ0rLaptVF0oHdw2rNK/0kcZUm9ozIuWBKS+tcLjGq
JEDL0V4RhKTL3PHFoiMJ7ndrv+qcyl2L5LxSptcGrS74YKNcGSEaSY9gzQVs
DCKiIn4hX5R66TlxgYnChqMjD1WBkuYJ76QH3Ls1rgep+cTm2g2Uy3VghuaG
xCyrB/UChrj4PhcPGquMYzIUSR5WigF9aHTcuTiRg7NAVs4ZcuawD6aEoUju
8rGiz5Gde/yO4VMIS1RFdmcQpTt2+e3ZfkNPoYnlBSEksUztZiXdjI378muI
gNXJym6QKojTEjHuos9R/CSPG4iY1poEvwduUVJU0arPWAXz1+QxwHAUHNya
BPwuquyopJyYeHetkKOGSoi7qvwdHxUxk2JWAcy5JgixIEM864rfPrDvjKSa
lBup6QxuS3+vEi/knUKvIe4q3vocq6HwT0w8EHUA3A7CB9YTo4M/S4s24lL5
r/yM4w6pHh/elDENPwEDJUGmmC9YEnWQ7bZsgOHwt7Ccz2y6b7ZwWLfhOsz2
cvjUD4FhMZvNBQfLrBK+EUcFgbBVh1jPxQCmVXIj/NQoQl56A3ElaNCFj3qb
6Wun7wk78IlbA8El5SB5YcwvQSuVHGGga9PJoh+Uxd5WBhKVXE74nIh1VXVh
ikmBttgJo4q7yvA71TEidi6BCK8ciRREHFgKE72k/JhQjJDqsTclinSG4oEZ
eP4eXRc1OB6sg3ufxLma8CkI7x+Qxksr4qXyh+wIMfwdYgKrhF8eUBvIz+KB
QBPtNreoKNzhsZu6NzvWONqcv98VJAHMZ5Uq5BeNfj9iUqqZOndEMgFyTITw
GJkXql8KwdFzXBCdBTVLWfK40JodEt7TMylzy+wpLm8T5RbZtxS1+K2/j1iC
TNZ3Xfznq7RqBpk7NezOhxBwmUYovEQhlJrltaU4x63eAqzEbO3vVjz7HPlO
TNMQoj6EG9j7ee35Mk+RkleCjALnuMGHcEtOlUi5Wc7R0rlQKn1JbfVzBCuF
tJR6F5mxkgrWKAHfFq88jjhf4T7P/SXj0wfCXPR5bPHwg38m79AmZDXF/Kb7
6ogIpMatmRbgzypPc+iqrBvpIFYpTsA6EtIEACpEtcowMeEoSJY1BAPbat+n
mAxsd8Vv8jCFciQ0+7AFuYCjQDpLDnnDy95u6UKHSR32ipDHzHjfdOGbQle7
RXMHWA6LNhNEHnvKH5Izw4Q9itChNo+snr2uAcuzhJ1M5qaJuIrxShjjSDsR
6Gk+IFJcy7xJa8Dsd0JNFoQcJ0+Ugc/LalpSCUC0MGTSHCgxYq+Sj+NL+a6d
yvAqf6A8MPFjeU7s028+BJNXF+ix7LgpOCtKHq9b8zC1145DoRoVo4IfnE5x
xhHdzFwGyVJToy8hPlEhUREnZRayKRI0MVMEeA5NI27H8TEGiXQydgEVhHBR
UJWPQSLwlp2ayqFouG3z/RGHB2PjEWELR5CqyFg1VaQaKpOWVcoOH+W7rQyf
63VGhJG2wgsXx5sSmCVatxDaBxhaloT3mCQF4m8F0ioJwYZDh8M+zYINmImY
ka5W/4AhxAiTYu78JbOM6jvE/pYPYUBhED+LN5RGC2ejcAEn9aPU5xCjv0wA
pRleNECX8pQoKABqJm6bTjeN149s/7IEBxqguUC0drYPPkdhNyEZ6dKkRwpC
7pmFGxWhS+NdsgwQCumOZL1Peqh25hVWRt7MAFMuKcdGu5KW4dZH7LuLFfrJ
GKMOKSigomC6g/MMZZ6YTIeSK0Vl5ZbUueLMXTE3425ECNrkwHB+2jbgVVA0
TN5VWCvxL3KZ6y0Vz0E5POtIH99RfnnTvVnFqabMCSPyx/5aCSIOSvlhkrKl
THxVg0+lpmFYJZ+kVY3pkbuRsxZZsVejH5t2a0sqZkzahcwIY4D6w0aDgBPN
UEyUTJwKZpC/gDCihkBM+1qFC9rIQOJEZYwpCNwGxNzQ9dLWPti95rtLf0sD
AeiKmXPyfUQktcmNzOBZwzEgg3qsqApqUs2SDIOE2CsTT5rnaZFH9hEMXrWd
GqjdaCdc1S+v8i7evNFgopEC8hBy8HmrkhpVPAGUdEbKN0YI4U07dz694dc3
YIp3MCnwjT4ktIA53oIPmFmu6mxIaDPIAsnG90w2+F7uQCTIo+GAWtqxci9p
N5k0B3MAtgr8x3jlIfC3wDb+yCIvAFrft0pZObxagHW+WrJU0SgphwZyl+eb
NwcppDoowtikD602lFcSL0HOEk8sZBKGxTgA+52MM4TlkhtkV58zVBJH0pcT
32VBxHpXCqZ+rvZoFYemlrlp+KWB1zKJcrPNyONLqyvphyXUB7mylGyKEQIM
qsmHM2k3biilpy6CyA6RNWtvSnjmMWUpFtDT3lnHy8+0WcWjkLMgOn/45qxq
NYSp5AF6f8Zy07qIqk/uVNQEka3mCpnaos50hDWhQEHUIB1e4g2O/+HKW5x9
m6sr5H57AkQiy6bGESqd2PpUgNnfhV/04YBttQ5VOnV+drc8Y522Vgx1+koy
VCxi1rBX1W0G5Cm9y1VkDRFyzXcInsr1ziiS50BhYgRW4xraFvmDcDAzs1x5
X9pF96gKDEVx1AFhu1sxycHHhG7kazJFr473qODait1XMkMdD2cv82IJj+RC
0wK5Bn4aogb5QLKddsbKM4+iAjuSC8oPSQQBhYIZfwcHzfEgit3wAu9IWYmU
G4nzCoNI6nNBrrjgg/4OlD1fCVMK2VHeL8MqDSRjqAm8pZmfFcOE5uk3QR3o
LFo+JHEE3NPID1LrIR/ginIHQG1SG8bYQ6RcxEo7jVYdwOYAMd3Qwur0GxRc
xPJuAyOaEUutDhb5hRIMA06BYpmCrlo25TmLeQU6PuVO6IwAU70CeYHVY22d
Vstow/YirG9HKUkxkO46OFYqDann8k0WV4RPIAK1i0BQfTktEsleZSNRTC+T
SfZNrJn0bxxGR2lwwHgL9htTNSxsl+SuM8p15XmE5P/w3dqP7nc4UygRgdRZ
tXyweZcyol+T3mxwdfRaFJNa2YLYglBE5SDlrFDS7WlkI/7SGCDi9ByQakv0
emqXNWXevy65VQpRlqOjA1+K40WrNvX7eFZ2qRyft3R+wMb/PaoNnCiJ0G5L
UyNVyQ5ZsE1PxdGRzd6Xupil9D2Ys2pnSCFTG1PIlBNdnoXiqsaC560a6V7Y
UBfW41BUpzyFdIjV5oeJycWcpBzRwm5LjK8iBo+N3OHOh+tr5FMy46vFHAld
KYZtXJN8gmdBkLkNtKbfliiPz5IDEFDCzwoiyVQStT7X1qfKZj0gTrqN2YDK
fTFtZhWHMmIUkRtoII5V2HSv1Rew4o96zbBtztXJFBeuJJJw2A9F5m2Q15JI
zpvnqOTqQEelj8k8rMqYPKR2SSDTWBScFBwgrQx/8+7Ku353+X5enSE3ZqV/
prwLdaCg/PhrxIp7SrVP2PVM4kk7wI28uQUrXS/DdU7gLhIvYi1+V8qi0nPc
7isnpUy9VKeG6cMpo6n8Oy3FOJHIsBCIHAIcaYSpDNaYZ/TlfrjanM08CLLS
ueJm7FKnPHFIrJwwTFjCw/syt1B1JQDQfsFzmHWZjYJ99M9ydE53oDpwnWBA
EWKsA1yJL/rDGvp49m0dgdUtW9Da2nJayVpGva53tyb2kE5XKE2rhs+bSasm
p0R7WMu5hEX1kIKMwVb00P3zGOTajgo1ls4dV1JwippJb4Whw1RaTEXLXMUe
/CRMlbJei/tdUc65IZpOP4dbCfEE6M2EkoF9tCc/z0+lzdEJkm8Ttk22Owkv
4dAXPXVqhubPeonJECsO7Lp9a0X/4JsLUG/J9V/HiOr5HGdDsUWjyGXRlRaO
NGGqzpQybwxTBQDSKY4wSwyAr4SPxlpVR1ebQC2tIDN1Eo+2CIq6GLxZBxQW
C4GU7ZyHK3wTHxaHGYniGYXMTzRpwKLIYhUZmaRpsCEXUSnxk1RmSeZgNix3
a5WZYVZnEUiR/fiZ3+VgyKzw8Mb/QrUwy5ifbqJpdIUvzDiczhOrXRV5IFT+
j/Lfo3bbVslb7RKVNude1ROWf4sHK4UFpZbp/iMGgyb9hkGoPbTV5Sr/ioJj
3aOlXJwKS6tbI9O8Ecqq33Ilv5ZrMwLJqgx8fvl+MGxRcBB9YN3qm2CfKkIp
rgiw5PcUzS2MyDEx6Q6U2TJZTQamkV9JhiBYB1zvHFCldJQzGfZKGGE3dPWz
6c0fgsgRZ9lXB8OUBWmjdHPTv/4ayQ9UERT6hietvmTElOmVCh9Wc1/Sd8jk
4Fj0c3bzMe9y9N3x60LXoxYfUrGXTTVxUxGwCm+FPCvLFhnh1zUhlOQUyD94
3c93zqlf9bi06rFatU5yZRGgWveU6u1R2TLKF9S3Rfc1HGkSYHCDQzxbmSZx
oL6Jk7J16lKFNytLOIxk+FERSW1ZhiIXsxiKjKFSSrtSzgFaOvVUxxyQ22JW
Bsve4Msy2CpykoLx7Hzy1tOi0Uw+UaXCdRxUvp/4T3kxv3ZAImU0riQ/oVjm
mfg1y6jIpDzgHUbaD8trfJW7X19xDGbN2eMhpXCV2I344bUetsPo8CNDB+Oy
yb5Uw5QHwChCnBaqPcKEBA2m9awLNTyYdgbmQy2/IllGjBW13K64RpSQ6cDK
Gi7ElEvZz209R54FpoczYjhmMjUM8YgJdikiM3ZHqql2KIP82FwMTsAbpDO4
LaNhndZVFMbIUbxmfYPzM+jXszk7P9YhC/08U1RT9tnkYtJRxdSwnk/lto5U
60Y9AoEx7oFPVPs54oCdRD7RolKi2jRuX8WDOR9EGKh0evq1mL27PJt54gfZ
6ERRw/WDj4gsxCfrO1lCxx/pt9v5G6Bw6ufhDfs7na/c8I62fdVrn5xn30lS
35gE5+k9s7JgRY6Y/K1PbsMb9MKPDJ7aBwhU196/f/QuDGCZpKF/Lmc33o24
vrk6u3grjq/P/tM77jmtlloUkU/55+zixnsL/O/Y6nZdZ+yOB0Nn3G+Zy2qA
zt9mYeodnRhr/ui1cb1mYQ/mN7T06ZlekoGCZwUUPLZajch2bLcakerYaTUi
z3Gv1Ygmx66G/GtgvYscmLIK3YAuVwzFyyzASiXSknUHGy1+q3KSjDXpB0AG
px31ioLfvImNGBECGTvlVDUYKbSiVSEtlIWqKq/Uvm/FEgrZ6fgE+QRR7JGO
WhaaHa5QyDOMzCqDctUwqiA6Lk2LL5Rqcr4q58GX5UJ5XnYhVoLFsmKHDDGV
3Y7qM4NCJXoU4J1LpkKfCLmaUqFtXbxTJbaYnQRCUiVk/ImgJy2L3JkotY1C
LJjEGWaYVbQTFc1VDQeKmgur/9oYXemEPAzjEIbJpHvTbUtlVJzwtER/kIp0
GllhFK2nPeUHiGAwcud0zTrXs1E1bWl9bZE7h0vl4dwrjiFoxHLZSQb7NQQV
V9+Qa4jfkjTVZUqcAdrIhGdflka1yW5M80VyGIYVbl6SXHFqKLSsz9J77Lgr
1MDWlVLmts8N/Z2aYPHJ7SlL4gwY6aQnQgCy2gFFsP4KVc9tuELjrZySVy3m
rAk7UdCV+/yo3Bs9Mim2MqFDaVF5eYxOKNH1ygcKT3iv5PzLUq2+ZvUQwBSe
pSy30dVoykdERa0yIQwOfK/T67ggR+YPGCeiHKzBly2P+gp2t6YnXpmuFLN2
k5yLVNZK8b0wQDucI0K0XVpE/mLKR6ISFBpiK8cN7WE4UKYKynAgiiTt9XjS
YuAKkixOZCyTW3nSJtMSSdQANcEizzVVe92F9zvUh49B0FHpJwNc2d3qmFrS
2CiGKW73meJxnJah6nQ4lxR5Qx4dUGaM6esqFOWbTAB3C7shb9kG619wOmpb
x/hzH2NTqwLvMNq1PAYFGik7elQZC7+cycqcDez8UfVV8jPso4ns+FFmYtaV
5+h9q9PZ+Cml5BrZY4Y79ngVRGhnYD5/kDyGS1VpzZNRTJHdPKt95GOs/iHY
JRz2Bf6dUqwPFv9VZtrjwLQC3W+g3AKJ0T40krXMLAqd76tpCOPBmA8Y7UtQ
Mxnt4XBLm1MODI9r3nGNvJHGVGXvHeJqTSksKR55phqwG/9OIvYyCMmtVuC1
mrwN0q/1ImV5oVSguSyirS5iqzrNMMv1VvrKEPxlRyIL9VKQmnZgljeqlC+j
OEtOXQrM6PCFCkLDjo7DLtjXmrhDzAB4MsOA5EPA/TN0VD4eVRKiy5za3JJ1
Zwq5nCnnSRUJmge8UyYpM7kW2aJO+MUT6Di5fqqz0jB9eh1m1INTP+0TdgTk
Adpit4NQ1uxy4EoWjqvfWGu7DbONv5Xwk3WY0hIvlgi/uKzZgD4wZIQ+durc
N0ov7dsrF1mFtet4YalyO0/mh7mDL8qxpeOSUmFI4rjaQYX090yHhk3na6Gc
VjtjlMBtVAAITCgSchebWkl95WLtplqFpLRScKiSSosHASrvHte2DzIjRa8t
i92rZeVpwFbFLZeC8sGYOJJnKigN9SeXkt+8WLfMbc92yU3LfdeJY1PGPyFY
3g1G1tzsCxUb0j10y5n+cre4QU1m2kOkfeq1LqLor+Qi0ioVLrGYGqK6SqoY
vHrKpxABT/etdFd+qx6Qzi4zLI9QuCENGje8JHJ4tn2NVEtVhYlaQ16+jd66
INOSh5kbfl63j8rKfLZMy5WSdaXfChcJ5sSdpK7X7Nj1D2SeIpLmiF8ApouQ
Qt+CQWw/vDZIr+jaZXw0Gu1Vo6tGeLvs8DMneanL74P80Hz3oMfvA31oPH7Q
13ejPqx5odbRd6U+rHmh1s/n6Q/7trMohFq1P6puk7X+NB0jMH9Mf1pp1CIk
GsfEQL1oHFNtb+N/OWdzXrZqx5/nHXMmH+efBijUnUX9koujSq+ffupyIWoO
p1gOK6rv1Dph6467fk3AnHfrXdEDWQvG3Lx7wRk2YU/DUZJLCRvONwxd4259
djnynYHbUt5I/PfodeUKKO6Lh3GhEgviiMePLBF1SVjJ7SadFy/v3Ib6NtZ1
KyWNYu1GQX9t2zglLeFBM99QOzyUgs3Ciri7IQfFzyoH0dMpHa45BHJdimzg
cmt1DsJV4nw/vFacoZM++PhRCfqATpWXUEFOlbPIkFYWldImwZrcPtI6YM2L
OwHI02jqlteVLeiVHlowhCjhU7Za9TnkiBHHV10x3XMbYE5KUV5VrnEOweTL
MAX9fofmDu4PJVkCR4YdjROxTYPdKu7ID9AjKotkSgXHstGwmfSb10LSl2hv
Um+R8DEkh6rkNHgeRF/sTOGoLc1GxqLRd40QMdpT/4J1GpQageOKqr5k7N9I
hg9P1tYtpdjcJI8Be7Nj9HauuOSQZYFyWpVTjhGETZYxnDoVTVL7jmKf76CU
8lfBm5o21uX0rrBaBSTRIcodU6l2GpZRSSKY2mGb+tLWp2e3C5moxf7rxZcK
eSPSifs84YDq+wUt5h8Nh6uy3MI/css68mm11arfvNlFUt1/80bvoXsk7/qC
97/Oz44tAF4QK1cHV+SnkS0lQ6djBFDN0JD88uZwWkJDMgJaWUYChDnYgfQF
tWK9MlNS/ZU0nNeFZAROA3rBceo/f6zG0IjdHICZ3G3BK3n40IWM3Bm7fvFK
DSRXazU7RbKPV9sI5jGIY2Vuwq6w9kRDWZpBwTrvtGP4wluSMn6Tk//zy8x5
xY+YhXWQW+i218DSxaxbirFxiro0nepcv7D6hVyix+ZT3fqkZSXJRP6l8C/H
mGLkut4EOdVoWQxlfzVcjHpTe9AXw8XCXsz6PTEdO/OZPbKFO5rY80F/LhYz
Z+5O7YWY9OaD4dAZCXcyn88dyxK2M5iPrcH4q3dtPX4h7G078vP6XRTwqURR
jTsReiqNJ1+5o0F/MBvMxGDhWP3hYCGGDvztOvZX70S+BFY5zNRfgjuYDY3q
Run5Jl3D/gt1DS4SwvZipEcZBdnaew1yG709tbaxr9KBD5aIsNXO5tTB/s1U
jBeLyE8SGf9MlzErQTKwXh8R0O1oQ+qapIi5brpmQx+ZzVQ1oqxyrQqjM8tw
bgu6V9PUHL3gKteofkPiiTuDVEBAYlg1FqdmRbqrWt6LRX+fqyNcNqudMrw0
zOTleUidVPkFat351qNyzSFFJGSyRKGotbY+uqbeQhVzy30mQaEldqGqWBdc
1l3/gF4uuTmjSzZtQFc2ytiJ7jxdU+VbSp2U3rNwEzQpftjcItCFk1yErELx
MuRituwne2iXB3NxS3BAMjSaFmL85d6BpaTnitrVzD46f6HGRUDcojVO65PJ
74WKeB1JWWIqpxGClFUMdMuXeYGQ3JGRyqEnUFn1atP1z3CgRNiW41aUQcRp
6Qw+VttriX/CpX8vl/29/P6fCqv4nsb4Jxq1okXWA/ilOqR0H+WfzljpS/82
bqQc59VPrcOmQfn8h3GENau1B8nleaXWlMaNKm3R/jIzoWu0f31zCOVoGzrm
6dERr/foVExMVl9IT+OXFR1KvlTtgbDiuulnC4iApsrnAtPfGPTfwD0Os4XG
6Q+H+I6OTJSVC8nBrrsyKOO0XA3VZEVTZdQBi+IAkhy2J2rRpCaQ7ddQk05Y
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
mUpjaJhC99dAXNC91WcRd6BGWim0Qm1TaHMwdmSIFn9ryS7wpMhEMa21pk6k
WNkAXGW7XctRZb65up3DV4zNvPmy2PFaR2mxHRXG8+Bw6A7m0os1clDelFi6
/6DaWqIrLuLKeGFaaZdb6o+7aJJeBbAUKhHaYG9cewP349V7vgIkD6VSMhRe
sXprBJYH7kgGluG3Vltcy8KZvtS2CzOFKYt1Fc1gMDTfCRrRPdQI8GqZRfWa
yVCm4a+CRNoU1XtLy3dY4vK0ZsQANsSPbn1uIDLfCCnPy8Dk3DdfweUaNDWa
XcS3VPPAiRiod3Cs4wVBs8qlUMUjUgJO906rFNiyFlW3PLoMRF6HlIAZQk2w
aHHY+KMUCsq3XqVYBLC8uYyVqUpFMJGPQguB2WpqPjNBEBNE3qFShlOcCqkq
tMFiPBV2XjbzqroCeitPTFL9mV89c0Ly4t6L4In2oNPOxFw3v0+PjupgBzqv
T22CJRZS42jV9BnPrGaRjVO8kiVFBco27pbDilosSM9b8hstBXXtsmRpcgnU
yMBP5Z0emkKDwk0ZgEp/2JEWzWwnTz6TKpxe7qlpi3ET7OO7bdZiBkAqtX65
dAdLtUO0uqHOJDGZOgALZcJnq0AVI9K1DkwIVPyfI8PPcplpaatkah+jvtQy
EiOM/VU7wr14c5XJ9FU2xyqfX06q0/sPATYt1ZhptDAvMCku8OVQp/L9jY+R
WOpNuNJVbT/7IUi3z+XH93PzcsMCAhHfrb/qhhLl8g0o4bqVp4Y93lX5GV0x
s90Gvi7ZVZuS0Fbx57zrdT5i9UzofnIVPs1LotGGUX1XctAfl5t6tGResfXF
kj9iYgkHYwDCscRwIUY9MbUFZcWLhS0WM0GJ8cKZixlofLbo/vcu/gTw33W3
0+0WxrMt4Y7ExBZgHFD6PL7nTgVl0OOHw6GgJHoxn4NGK2D+d93ud93ONzDc
0/G/dUvjOZhnLwZzUIzFYIzTg9ppzep0aPXT3XRDNQz9E4WnJycnkrn/8517
+eU/v/3+y/eLy/775dvp9Tfvfvvt3VN2/aXzexs41nXWu55M/y37/Pbzv8B5
fl3uBPw/kAq/th3t9yOQq5Yn+UUEfgYs7nYHtAMg/5MoJp3Knz+hyboL9F9z
47L5Px39qVP786cDfz37A6NKyVlZyu8ITr+Tf91Izofc3FCV2UGIi2NvhvYm
4rM8jITT7/QwpYbMUhvRamPJsaNGxClqL/qFKf6MM/xdzSK059MgaJyO6L56
Rr8ro4DaWiivA/tUpjLgP880uG6V5669nxjmtp3faTgaxvHW369jn3Q6neuK
/YbK15CqDDvbwWmOAAPErb/8jDzkWuUCzqR+60v1o0Y14DYdEeMBXn/KDfVQ
/UcF0SjhZhdW4W3ZDST4AuolXUqosxCXhZkrS1dfci0z61V4dqYKF8orKAvJ
RmlDcQY9WVtwEfHIFS9/+ud64vMCbWU0mJeqFm76ylvELIuWgJYI2GYd+UlF
OUYzB1+XLbTCRKiGO2a73OL9fU0XOuB1uyxVbpD+iCNpLJCGFyc3BV+2vkoA
9vk9sUr8O7Akxa/+Gzb0v5xfik7n1/Lm4Sh+asMQUqhSaxw/Ne5DhcPG9kvL
cv3+qfjVQ5ZtU2BH94A5u9suqAUnmKSerIMVkPHJHeyhcxus12lOVycZqK0n
Gx8vWDnB2X6Ne+JYwDkGTzHbCAUxPP+ls9R+9F/BI3b3w/yjvHomN8u6+td2
9TvDVfXrTgesuZJGkoKhtTi7OMO03msx+XhzeT65OZuJm8nba74b3Ht7dlGN
QaS/XGP/yzX2v1xjz++96Bp7/LcmJpb+cj3cL9fDBb9cD8cL+Ye/Hk5TuME1
ZaxCf4d61t/mdqJ/zLb2f1dt5/Bfhf4/exGNHvy/IEdCPXXkXcxRBSVXbdHI
MjXRgHOfDnu0au4/LHm0VMRfOyDIc0tRiizBtCfpjroteHCDhnm1W5c1f77g
biU7q+rbCv1MHLOX6h5td/jk49VZ64i0d1Den56euqEf+d04uT/hvCxinSf1
Vzn++rS8hfwCw/zmRPKm3Mi8LvnbhW/4M0zHSZ13BK1tSz1bZRdkjdvm92bT
WR5fOPr7atck/L6nvzdrNvT6hKu/VxZn/vOnox9ORcNtl52M76kOs3Xw9av6
qzJf/Xj0fwFQn/i2Yd0AAA==

-->

</rfc>

